from dataclasses import dataclass
from typing import Dict, Optional


@dataclass(init=False)
class JobInfo:
    """Create a JobInfo instance."""

    def __init__(self, job_info_raw):
        self._job_info_raw = job_info_raw

    @property
    def job_id(self) -> str:
        """The job identifier."""
        return self._job_info_raw.job_id

    @property
    def job_name(self) -> str:
        """The job name."""
        return self._job_info_raw.job_name

    @property
    def run_id(self) -> str:
        """The runner identifier of the Job."""
        return self._job_info_raw.run_id

    @property
    def job_owner_id(self) -> str:
        """The job owner identifier of the Job."""
        return self._job_info_raw.job_owner_id

    @property
    def trigger_type(self) -> str:
        """The trigger type of the Job."""
        return self._job_info_raw.trigger_type

    def __repr__(self) -> str:
        return (
            f"JobInfo(job_id: {self.job_id}, job_name: {self.job_name}, run_id: {self.run_id}, "
            f"job_owner_id: {self.job_owner_id}, trigger_type: {self.trigger_type})"
        )

    def __str__(self) -> str:
        return (
            f"JobInfo(job_id: {self.job_id}, job_name: {self.job_name}, run_id: {self.run_id}, "
            f"job_owner_id: {self.job_owner_id}, trigger_type: {self.trigger_type})"
        )


@dataclass(init=False)
class NotebookInfo:
    """Create a NotebookInfo instance."""

    def __init__(self, notebook_info_raw):
        self._notebook_info_raw = notebook_info_raw

    @property
    def notebook_id(self) -> str:
        """The notebook identifier."""
        return self._notebook_info_raw.notebook_id

    def __repr__(self) -> str:
        return f"NotebookInfo(notebook_id: {self.notebook_id})"

    def __str__(self) -> str:
        return f"NotebookInfo(notebook_id: {self.notebook_id})"


@dataclass(init=False)
class CommitInfo:
    """Create a CommitInfo instance."""

    def __init__(self, commit_info_raw):
        self.commit_info_raw = commit_info_raw

    @property
    def version(self) -> Optional[int]:
        """Table version generated by the operation."""
        return self.commit_info_raw.version

    @property
    def timestamp(self) -> int:
        """When this version was committed."""
        return self.commit_info_raw.timestamp

    @property
    def user_id(self) -> Optional[str]:
        """ID of the user that ran the operation."""
        return self.commit_info_raw.user_id

    @property
    def user_name(self) -> Optional[str]:
        """Name of the user that ran the operation."""
        return self.commit_info_raw.user_name

    @property
    def operation(self) -> str:
        """Name of the operation."""
        return self.commit_info_raw.operation

    @property
    def operation_parameters(self) -> Dict[str, str]:
        """Parameters of the operation (for example, predicates.)."""
        return self.commit_info_raw.operation_parameters

    @property
    def job(self) -> Optional[JobInfo]:
        """Details of the job that ran the operation."""
        return (
            JobInfo(job_info_raw=self.commit_info_raw.job)
            if self.commit_info_raw.job
            else None
        )

    @property
    def cluster_id(self) -> Optional[str]:
        """ID of the cluster on which the operation ran."""
        return self.commit_info_raw.cluster_id

    @property
    def read_version(self) -> Optional[int]:
        """Version of the table that was read to perform the write operation."""
        return self.commit_info_raw.read_version

    @property
    def isolation_level(self) -> Optional[str]:
        """Isolation level used for this operation."""
        return self.commit_info_raw.isolation_level

    @property
    def is_blind_append(self) -> Optional[bool]:
        """Whether this operation appended data."""
        return self.commit_info_raw.is_blind_append

    @property
    def operation_metrics(self) -> Optional[Dict[str, Optional[str]]]:
        """Metrics of the operation (for example, number of rows and files modified.)."""
        return self.commit_info_raw.operation_metrics

    @property
    def user_metadata(self) -> Dict[str, Optional[str]]:
        """User-defined commit metadata if it was specified."""
        return self.commit_info_raw.user_metadata

    @property
    def tags(self) -> Optional[Dict[str, Optional[str]]]:
        """Tags commit if it was specified."""
        return self.commit_info_raw.user_metadata

    @property
    def notebook(self) -> Optional[NotebookInfo]:
        """Details of notebook from which the operation was run."""
        return (
            NotebookInfo(notebook_info_raw=self.commit_info_raw.notebook)
            if self.commit_info_raw.notebook
            else None
        )

    def __repr__(self) -> str:
        return (
            f"CommitInfo(version: {self.version}, timestamp: {self.timestamp}, user_id: {self.user_id}, "
            f"user_name: {self.user_name}, operation: {self.operation}, "
            f"operation_parameters: {self.operation_parameters}, job: {self.job}, notebook: {self.notebook}, "
            f"cluster_id: {self.cluster_id}, read_version: {self.read_version}, "
            f"isolation_level: {self.isolation_level}, is_blind_append: {self.is_blind_append}, "
            f"operation_metrics: {self.operation_metrics}, user_metadata: {self.user_metadata}, tags: {self.tags})"
        )

    def __str__(self) -> str:
        return (
            f"CommitInfo(version: {self.version}, timestamp: {self.timestamp}, user_id: {self.user_id}, "
            f"user_name: {self.user_name}, operation: {self.operation}, "
            f"operation_parameters: {self.operation_parameters}, job: {self.job}, notebook: {self.notebook}, "
            f"cluster_id: {self.cluster_id}, read_version: {self.read_version}, "
            f"isolation_level: {self.isolation_level}, is_blind_append: {self.is_blind_append}, "
            f"operation_metrics: {self.operation_metrics}, user_metadata: {self.user_metadata}, tags: {self.tags})"
        )
